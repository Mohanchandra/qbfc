==QBFC-Ruby

QBFC-Ruby provides a wrapper around QuickBooks' QBFC COM object, while
allowing more or less direct access to the actual COM object.

Obviously, test before using on your production data...

==Relationships

QBFC-Ruby supports loading of related records. These are records
represented by "*Ref" in the QBFC documentation. For example, a Check
has, among others, a PayeeEntityRef and an AccountRef. These can be
accessed via, respectively, <tt>check.payee</tt> and <tt>check.account</tt>.

<tt>check.payee.name</tt> returns the name of the payee.

You can also access the *ID and Name fields of referenced records.
Example: for the payee of a Check, <tt>check.payee_id</tt> and
<tt>check.payee_name</tt>.
	

==General Examples

  # A very simple example, finding a single Customer by name
  QBFC::session do | qb |
    puts qb.customer('Customer Name').full_name
  end
  
  # Find all Customer, then return the first in the Array
  # Next, find the first Customer only
  QBFC::session do | qb |
    customers = qb.customers.find(:all)
    puts customers[0].full_name
    puts qb.customers.find(:first).full_name
  end

  # Same as previous, but not using a block  
  sess = QBFC::Session.new
  customers = QBFC::Customer.find(sess, :all)
  puts customers[0].full_name
  puts QBFC::Customer.find(sess, :first).full_name
  sess.close

  # Use a QBFC::Session object, but access the COM object
  # more directly.
  QBFC::session do | qb |
    request_set = qb.CreateMsgSetRequest("US", 6, 0)
    customer_query = request_set.AppendCustomerQueryRq	
    response = qb.DoRequests(request_set)
    customer_set = response.ResponseList[0]
    first_customer = customer_set.Detail[0]
    puts first_customer.full_name
  end

Copyright (c) 2008 Jared E. Morgan, released under the MIT license
